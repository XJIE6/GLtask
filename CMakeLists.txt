cmake_minimum_required(VERSION 3.5)

# Disable building extras we won't need (pure C++ project)
set(NANOGUI_BUILD_EXAMPLE OFF CACHE BOOL " " FORCE)
set(NANOGUI_BUILD_PYTHON  OFF CACHE BOOL " " FORCE)
set(NANOGUI_INSTALL       OFF CACHE BOOL " " FORCE)

# Add the configurations from nanogui
add_subdirectory(ext/nanogui)

# For reliability of parallel build, make the NanoGUI targets dependencies
set_property(TARGET glfw glfw_objects nanogui PROPERTY FOLDER "dependencies")

# Various preprocessor definitions have been generated by NanoGUI
add_definitions(${NANOGUI_EXTRA_DEFS})
include_directories(${NANOGUI_EXTRA_INCS})

configure_file(include/learnopengl/root_directory.h.in include/learnopengl/root_directory.h)

# On top of adding the path to nanogui/include, you may need extras
include_directories(ext/nanogui/include)
include_directories(ext/nanogui/ext/glfw/include)
include_directories(ext/nanogui/ext/nanovg/src)
include_directories(ext/nanogui/ext/eigen)

file(GLOB TASK1_SOURCES src/task1/*.cpp)
file(GLOB TASK2_SOURCES src/task2/*.cpp)
file(GLOB TASK3_SOURCES src/task3/*.cpp)
file(GLOB TASK4_SOURCES src/task4/*.cpp)


include_directories(include)

set(CMAKE_CXX_FLAGS "-std=c++11 -O0 -Wall -Wextra -g")

# Compile a target using NanoGUI
add_executable(task1 ${TASK1_SOURCES})
add_executable(task2 ${TASK2_SOURCES})
add_executable(task3 ${TASK3_SOURCES})
add_executable(task4 ${TASK4_SOURCES})

# Lastly, additional libraries may have been built for you.  In addition to linking
# against NanoGUI, we need to link against those as well.
target_link_libraries(task1 nanogui ${NANOGUI_EXTRA_LIBS})
target_link_libraries(task2 nanogui ${NANOGUI_EXTRA_LIBS})
target_link_libraries(task2 assimp)
target_link_libraries(task3 nanogui ${NANOGUI_EXTRA_LIBS})
target_link_libraries(task3 assimp)
target_link_libraries(task4 nanogui ${NANOGUI_EXTRA_LIBS})
target_link_libraries(task4 assimp)
